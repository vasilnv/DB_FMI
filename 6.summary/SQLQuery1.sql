use movies
--1
select title, year, length
from MOVIE
WHERE LENGTH >= 120 OR LENGTH IS NULL AND YEAR <= 2000

--2
SELECT MOVIESTAR.NAME, MOVIESTAR.GENDER
FROM MOVIESTAR
WHERE NAME LIKE 'J%' AND BIRTHDATE >= 1948
ORDER BY NAME DESC

--3
SELECT STUDIONAME, COUNT(*) AS NUM_OF_ACTORS
FROM (
	SELECT DISTINCT STUDIONAME, STARSIN.STARNAME
	FROM MOVIE 
	INNER JOIN STARSIN ON MOVIE.TITLE = STARSIN.MOVIETITLE
	WHERE STARSIN.STARNAME IS NOT NULL
) T
GROUP BY STUDIONAME

--4
SELECT STARSIN.STARNAME, COUNT(*) AS NUM_OF_FILMS
FROM STARSIN
WHERE STARSIN.MOVIETITLE IS NOT NULL
GROUP BY STARNAME

--5
SELECT T1.STUDIONAME, T2.TITLE, T1.YEAR
FROM
(
SELECT MOVIE.STUDIONAME, MAX(MOVIE.YEAR) as YEAR	
FROM MOVIE
GROUP BY MOVIE.STUDIONAME
) T1
INNER JOIN
(
SELECT MOVIE.STUDIONAME, MOVIE.TITLE, MOVIE.YEAR
FROM MOVIE
) T2 ON T1.STUDIONAME = T2.STUDIONAME AND T1.YEAR = T2.YEAR

--6
SELECT MOVIESTAR.NAME
FROM MOVIESTAR
WHERE MOVIESTAR.GENDER LIKE 'M' 
AND MOVIESTAR.BIRTHDATE >= ALL(SELECT MOVIESTAR.BIRTHDATE FROM MOVIESTAR WHERE GENDER LIKE 'M')

--7
SELECT MOVIE.STUDIONAME, STARSIN.STARNAME, COUNT(*) AS NUM_MOVIES
FROM MOVIE INNER JOIN STARSIN ON MOVIE.TITLE=STARSIN.MOVIETITLE
GROUP BY STUDIONAME, STARNAME
HAVING COUNT(*) >= ALL(SELECT COUNT(*) AS NUM_MOVIES
FROM MOVIE INNER JOIN STARSIN ON MOVIE.TITLE=STARSIN.MOVIETITLE
GROUP BY STUDIONAME, STARNAME)

--8
SELECT MOVIE.TITLE, MOVIE.YEAR, COUNT(*) AS NUM_ACTORS
FROM MOVIE INNER JOIN STARSIN ON MOVIE.TITLE=STARSIN.MOVIETITLE
GROUP BY MOVIE.TITLE, MOVIE.YEAR
HAVING COUNT(*) > 2

USE SHIPS
--1
SELECT DISTINCT SHIPS.NAME 
FROM SHIPS INNER JOIN OUTCOMES ON SHIPS.NAME=OUTCOMES.SHIP
WHERE SHIPS.NAME LIKE '[CK]%'

--2
SELECT DISTINCT SHIPS.NAME, CLASSES.COUNTRY
FROM SHIPS JOIN CLASSES ON SHIPS.CLASS=CLASSES.CLASS
LEFT JOIN OUTCOMES
ON SHIPS.NAME=OUTCOMES.SHIP
WHERE RESULT NOT LIKE 'SUNK' OR RESULT IS NULL

--3
SELECT DISTINCT COUNTRY, COUNT(RESULT) AS NUM_SHIPS
FROM SHIPS 
RIGHT JOIN CLASSES ON CLASSES.CLASS=SHIPS.CLASS
LEFT JOIN OUTCOMES ON SHIPS.NAME=OUTCOMES.SHIP
WHERE RESULT LIKE 'SUNK' OR SHIPS.NAME IS NULL OR OUTCOMES.BATTLE IS NULL
GROUP BY COUNTRY

--4
SELECT OUTCOMES.BATTLE
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
GROUP BY BATTLE
HAVING COUNT(SHIPS.NAME) > ALL(SELECT COUNT(SHIPS.NAME) AS NUM_OF_SHIPS
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
GROUP BY BATTLE
HAVING OUTCOMES.BATTLE LIKE 'GUADALCANAL')

--5
--SHOW ALL BATLLES BY NUM OF COUNTRIES
SELECT OUTCOMES.BATTLE, COUNT(COUNTRY)
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
INNER JOIN CLASSES ON SHIPS.CLASS=CLASSES.CLASS
GROUP BY OUTCOMES.BATTLE

--SHOW BIGGER BATTLES THAN SURIGAO STRAIT
SELECT OUTCOMES.BATTLE
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
INNER JOIN CLASSES ON SHIPS.CLASS=CLASSES.CLASS
GROUP BY OUTCOMES.BATTLE
HAVING COUNT(CLASSES.COUNTRY) > (SELECT COUNT(COUNTRY)
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
INNER JOIN CLASSES ON SHIPS.CLASS=CLASSES.CLASS
GROUP BY BATTLE
HAVING OUTCOMES.BATTLE LIKE 'Surigao Strait')

--6
SELECT SHIPS.NAME, CLASSES.DISPLACEMENT, NUMGUNS
FROM SHIPS JOIN CLASSES ON SHIPS.CLASS = CLASSES.CLASS
WHERE CLASSES.DISPLACEMENT <= ALL (SELECT CLASSES.DISPLACEMENT
FROM SHIPS JOIN CLASSES ON SHIPS.CLASS = CLASSES.CLASS)

--7
SELECT SHIPS.NAME, OUTCOMES.RESULT, BATTLES.DATE
FROM SHIPS INNER JOIN OUTCOMES ON SHIPS.NAME=OUTCOMES.SHIP
JOIN BATTLES ON OUTCOMES.BATTLE=BATTLES.NAME
ORDER BY DATE

SELECT COUNT(S1.NAME) NUM_OF_RISEN_SHIPS
FROM SHIPS S1 INNER JOIN OUTCOMES ON S1.NAME=OUTCOMES.SHIP
JOIN BATTLES ON OUTCOMES.BATTLE=BATTLES.NAME
WHERE OUTCOMES.RESULT LIKE 'OK' AND DATE >= ANY(SELECT DATE
FROM SHIPS S2 INNER JOIN OUTCOMES ON S2.NAME=OUTCOMES.SHIP
JOIN BATTLES ON OUTCOMES.BATTLE=BATTLES.NAME
WHERE OUTCOMES.RESULT LIKE 'DAMAGED' AND S1.NAME LIKE S2.NAME)

--8
--FINDING BIGGER BATTLES THAN GUADALCANAL FOR EXAMPLE
SELECT OUTCOMES.BATTLE
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
GROUP BY BATTLE
HAVING COUNT(SHIPS.NAME) > ALL(SELECT COUNT(SHIPS.NAME) AS NUM_OF_SHIPS
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
GROUP BY BATTLE
HAVING OUTCOMES.BATTLE LIKE 'GUADALCANAL')

--MODIFYING 7 WITH ADDING ADD IN WHERE CLAUSE IN SUBQUERY
SELECT S1.NAME
FROM SHIPS S1 INNER JOIN OUTCOMES O1 ON S1.NAME=O1.SHIP
JOIN BATTLES B1 ON O1.BATTLE=B1.NAME
WHERE O1.RESULT LIKE 'OK' AND DATE >= ANY(SELECT DATE
FROM SHIPS S2 INNER JOIN OUTCOMES O2 ON S2.NAME=O2.SHIP
JOIN BATTLES B2 ON O2.BATTLE=B2.NAME
WHERE O2.RESULT LIKE 'DAMAGED' AND S1.NAME LIKE S2.NAME
AND O2.BATTLE = ANY(
SELECT DISTINCT OUTCOMES.BATTLE
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
GROUP BY BATTLE
HAVING COUNT(SHIPS.NAME) < ANY (SELECT COUNT(SHIPS.NAME) AS NUM_OF_SHIPS
FROM OUTCOMES INNER JOIN SHIPS ON SHIPS.NAME=OUTCOMES.SHIP
GROUP BY BATTLE)
))

/* WTF WAS THAT */

USE PC

--1
SELECT MODEL, CODE, SCREEN
FROM LAPTOP
WHERE SCREEN LIKE 11 OR SCREEN LIKE 15

--2
SELECT DISTINCT PC1.model
FROM PC PC1 JOIN PRODUCT PR1 ON PC1.model=PR1.model
WHERE PC1.price < ANY(SELECT LAPTOP.price 
FROM LAPTOP 
JOIN PRODUCT ON LAPTOP.MODEL=product.model 
WHERE PRODUCT.maker = PR1.maker)

--3
SELECT DISTINCT PC1.model, AVG(PRICE) AS AVG_PRICE
FROM PC PC1 JOIN PRODUCT PR1 ON PC1.model=PR1.model
GROUP BY PC1.model, MAKER
HAVING AVG(PRICE) < ANY(SELECT MIN(LAPTOP.price) 
FROM LAPTOP 
JOIN PRODUCT P2 ON LAPTOP.MODEL=P2.model 
WHERE P2.maker = PR1.maker)

--4
SELECT PC1.code, PRODUCT.MAKER, COUNT(PC2.CODE)
FROM PC PC1 JOIN PRODUCT ON PC1.model=PRODUCT.model
JOIN PC PC2 ON PC1.price <= PC2.PRICE AND PC1.MODEL = PC2.MODEL
GROUP BY PC1.CODE, PRODUCT.MAKER



